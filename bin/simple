#!/usr/bin/env python

import asyncio
import logging
import os

from upb_lib import UpbPim

LOG = logging.getLogger(__name__)


async def main():
    def _dump_devices():
        for device_id in pim.devices:
            device = pim.devices[device_id]
            LOG.debug(f"{device_id} {device.name} {device.status}")

    def _test_commands():
        device = pim.devices["142_42_0"]
        device.turn_on(75, 38)
        link = pim.links["142_6"]
        link.activate()

    def connected():
        print("Connected!!!")

    def disconnected():
        print("Disconnected!!!")

    logging.basicConfig(
        format="%(asctime)s.%(msecs)03d %(levelname)s  %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        level=logging.DEBUG,
    )
    try:
        url = os.environ.get("UPBPIM_URL")
        if not url:
            print("Specify url to connect to in UPBPIM_URL environment variable")
            exit(0)

        pim = UpbPim({"url": url, "UPStartExportFile": "bin/upb.upe"})
        pim.add_handler("connected", connected)
        pim.add_handler("disconnected", disconnected)

        await pim.load_upstart_file()
        await pim.async_connect()

        # pim.loop.call_later(0.1, _test_commands)
        pim.loop.call_later(45, _dump_devices)

        await asyncio.Event().wait()  # wait forever
    except KeyboardInterrupt:
        exit(0)


if __name__ == "__main__":
    asyncio.run(main())
